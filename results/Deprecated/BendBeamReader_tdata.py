import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

import numpy as np
from problems.beam_bending import analytic_solution

from bingo.evolutionary_optimizers.parallel_archipelago import load_parallel_archipelago_from_file             
import sys
import os
import shutil
import csv
"""
This BendBeamReader file contains plot from pickle and reads a the beam_bending pickle files 
then run plot from pickel using the most recent beam_bending pickle file.

Simplification has/will be incorporated to simlify the f(X_0) equation extracted from plot_from_pickle
"""

# names of test directories and sub directories containing results and data.
# used within the below functions and must be changed for each new generation of tests
test_dir = "tdata_binaries"
superfolder = ["t2", "t4", "t6", "t8", "t10"]
subfolder = ["00000", "00001", "00010", "00011", "00111", "10110", "10111"]
trials = ["trial0", "trial1", "trial2", "trial3", "trial4"]

#This function contains a modification of the origninal plot_from_pickle file. Because while it is being run,
#the working directory is each trial, there shouldn't be a need for changes.
def plot_from_pickle(fname): #TODO rename as plot_from_pickle_simp when simplification feature is added.

    # read bingo pickle file and retrieve best model
    archipelago = load_parallel_archipelago_from_file(fname)
    best_ind = archipelago.get_best_individual()
    # print('%.3e    ' % best_ind.fitness, best_ind.get_complexity(),
    #             '   f(X_0) =', best_ind)

    L = 10.
    k = 5.e-5
    x = np.linspace(0., L, 64).reshape([64,1])
    yan = analytic_solution(x, k, L)
    y = best_ind.evaluate_equation_at(x)

    # plot the training data too
    X_a = np.linspace(0,10,training_points)
    Y_a = analytic_solution(X_a, 5e-5, 10)

    plt.figure()
    plt.plot(x, yan, 'r-', label='Analytical Solution')
    plt.plot(X_a, Y_a, 'gx', label='Training Data Points')
    plt.plot(x, y, 'b-', label='Best GPSR Model')
    plt.xlabel('x')
    plt.ylabel('displacement')
    plt.legend()
    plt.savefig('best_individual')
    plt.close()
    
    """
    This Recent_Beam function is what traverses each trial and runs plot from pickle. 
    It is meant to be run in each binary trial bin
    called over the trials bin at the bottom of the test directory tree
    
    parent_dir is the current superfolder
    """
def Recent_beam(cur_binary):    

    # for i in trials:
    for i in range(len(trials)): # trial0 etc.
        os.chdir(trials[i])
        Bending_Names=[]
        
        #os.scandir is a alternative to listdir, and is supposedly faster. 
        #it also gives the advantage of presenting all the files in alphabetical order.
        #This is a convienient alternative to splitting strings and comparing numbers.
        with os.scandir() as it:
            for entry in it:
                #Filters the files that we don't need, and gives us the 2 .pkl files in order.
                if entry.name.startswith("beam_bending") and entry.is_file() and entry.name.endswith('.pkl'):
                    Bending_Names.append(entry.name) 
            
            ### Copying the best_individual plot to our plots bin ###
            plot_from_pickle(Bending_Names[-1])
            srcstr = os.getcwd() + "/best_individual.png"
            dststr = plots_subpath + "/" + cur_binary + "_" + trials[i][-1] + ".png"
            shutil.copyfile(srcstr, dststr)
            
            ### Dict data storage ###
            archipelago = load_parallel_archipelago_from_file(Bending_Names[-1])
            best_ind = archipelago.get_best_individual()
            
            # write the fitness data to a new row of a .cvs bin named 'Fitness_data' located in the test_dir
            with open('/uufs/chpc.utah.edu/common/home/u1008557/' + test_dir + '/Fitness_data.csv','a') as csvfile:
                fieldsnames=['binary','fitness', 'complexity','training_points', 'f(X_0)']
                w=csv.DictWriter(csvfile, dialect='excel', fieldnames=fieldsnames)
                w.writerow({'binary': cur_binary,'fitness': best_ind.fitness, 'complexity': best_ind.get_complexity(),'training_points': training_points,'f(X_0)':best_ind})

        os.chdir("..")

                 
#Call methods    

# filepath for the 'plots' dir inside test_dir that will contain the plots generated by each test
plots_path = "/uufs/chpc.utah.edu/common/home/u1008557/" + test_dir + "/plots/"

# delete the Fitness_data.csv if it already exists
if os.path.exists('Fitness_data.csv'):
  os.remove('Fitness_data.csv')
  
if os.path.exists(plots_path): # delete the plots bin if it already exists
  shutil.rmtree(plots_path)
os.mkdir(plots_path)    # creates plots bin
  
# write fitness data headers to the .csv file written within Recent_beam
with open('Fitness_data.csv','a') as csvfile:
    fieldsnames=['test name','fitness', 'complexity','training_points', 'f(X_0)']
    w=csv.DictWriter(csvfile, dialect='excel',fieldnames=fieldsnames)
    w.writeheader()

# iterate over each binary directory
# changes the number of training data points that are plotted within plot_from_pickle
for k in range(len(superfolder)): # t2, t4, etc.
  os.chdir(superfolder[k])
  training_points = 2*(k + 1) #2, 4, 6, 8, 10
  
  # create a plot sub bin
  plots_subpath = plots_path + "/" + superfolder[k]
  os.mkdir(plots_subpath)
  
  for n in range(len(subfolder)): # 00000 etc.
      os.chdir(subfolder[n])
      Recent_beam(subfolder[k])
      os.chdir("..")
  os.chdir("..")
  
  
#%% 

test_dir = "tdata_binaries"
superfolder = ["t2", "t4", "t6", "t8", "t10"]
subfolder = ["00000", "00001", "00010", "00011", "00111", "10110", "10111"]
trials = ["trial0", "trial1", "trial2", "trial3", "trial4"]

  
  
  
  
  
  
  
  
